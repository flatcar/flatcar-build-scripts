#!/usr/bin/env bash

set -e
shopt -s expand_aliases

if [ $# -ne 4 ] && [ $# -ne 5 ]; then
    echo "usage: ${0} DATA_DIR NEBRASKA_URL ORIGIN_SSH_URL VERSION"
    exit 1
fi

if [ -z ${GITHUB_TOKEN} ]; then
    echo '$GITHUB_TOKEN needs to be defined'
    echo 'The token must have GitHub organization and user read permissions'
    exit 1
fi

DATA_DIR="$1"
NEBRASKA_URL="$2"
ORIGIN_SSH_URL="$3"
VERSION="$4"

# Used for debugging/testing of the staging server:
NOUPLOAD="${NOUPLOAD-}"
# touch /tmp/flatcar_production_update.gz
# NOUPLOAD=1 ./upload_package /tmp https://staging.updateservice.flatcar-linux.net notused 9.9.9

ARCH="${ARCH:-amd64-usr}"
echo "Environment variable ARCH is specified as ${ARCH}"

COREOS_APP_ID="e96281a6-d1af-4bde-9a0a-97b76e56dc57"

. resty -W "${NEBRASKA_URL}/api" -f -H "Authorization: Bearer $GITHUB_TOKEN" \
	-H "Accept: application/json" -H "Content-Type: application/json"

function get_package_id() {
	local output
	local package_id
	local r

	# Use || here to disable "set -e" as resty does not like it
	output=$(GET /apps/"${COREOS_APP_ID}"/packages 2>&1) || { r="$?"; echo "${output}" ; return "$r"; }
	if jq -e 'has("packages")' <(echo "${output}") > /dev/null; then
		package_id=$(echo "${output}" | jq '.packages' | jq '.[] | select(.version=="'${VERSION}'" and .arch=='${ARCH_ID}').id')
	else
		package_id=$(echo "${output}" | jq '.[] | select(.version=="'${VERSION}'" and .arch=='${ARCH_ID}').id')
	fi

	echo ${package_id}
}

UPDATE_PATH="${DATA_DIR}/flatcar_production_update.gz"
UPDATE_CHECKSUM_PATH="${UPDATE_PATH}.sha256"
UPDATE_URL="https://update.release.flatcar-linux.net/${ARCH}/${VERSION}"/

PAYLOAD_SIZE=$(stat --format='%s' "${UPDATE_PATH}")
PAYLOAD_SHA1=$(cat "${UPDATE_PATH}" | openssl dgst -sha1 -binary | base64)
PAYLOAD_SHA256=$(cat "${UPDATE_PATH}" | openssl dgst -sha256 -binary | base64)

env --chdir "${DATA_DIR}" sha256sum "flatcar_production_update.gz" > "${UPDATE_CHECKSUM_PATH}"

EXTRA_FILES=()
EXTRA_SUMS=()
shopt -s nullglob
for EXTRA_FILE in "${DATA_DIR}/oem-"*.gz "${DATA_DIR}/flatcar-"*.gz; do
  BASENAME=$(basename "${EXTRA_FILE}")
  env --chdir "${DATA_DIR}" sha256sum "${BASENAME}" > "${EXTRA_FILE}.sha256"
  EXTRA_FILES+=("${EXTRA_FILE}")
  EXTRA_SUMS+=("${EXTRA_FILE}.sha256")
done
shopt -u nullglob

echo "Copying update payload to update server"

SERVER_UPDATE_DIR="/var/www/origin.release.flatcar-linux.net/update/${ARCH}/${VERSION}/"
if [ "${NOUPLOAD}" = "" ]; then
  ssh "core@${ORIGIN_SSH_URL}" mkdir -p "${SERVER_UPDATE_DIR}"
  scp "${UPDATE_PATH}" "${UPDATE_CHECKSUM_PATH}" "${EXTRA_FILES[@]}" "${EXTRA_SUMS[@]}" "core@${ORIGIN_SSH_URL}:${SERVER_UPDATE_DIR}"
else
  echo "NOUPLOAD set, skipping upload to origin server"
fi

# Nebraska's arch enum values:
# https://github.com/kinvolk/nebraska/blob/953a1e672f42dea4530161a31756db239e0bb8aa/pkg/api/arch.go#L9
if [ "${ARCH}" = "amd64-usr" ]; then
  ARCH_ID=1
elif [ "${ARCH}" = "arm64-usr" ]; then
  ARCH_ID=2
else
  echo "Unknown ARCH ${ARCH}."
  exit 1
fi

set +e
PACKAGE_ID=$(
set -e
get_package_id
)
r="$?"
set -e
if ! [ "$r" -eq 0 ]; then
	echo "Failed to get metadata from Nebraska."
	echo "Please make sure that you have configured a valid GITHUB_TOKEN."
	echo "The token must have GitHub organization and user read permissions."
	echo "Error: ${PACKAGE_ID}"
	exit 1
fi

echo "Uploading update payload"

EMBED_EXTRA=()
for EXTRA_FILE in "${EXTRA_FILES[@]}"; do
  E_NAME=$(basename "${EXTRA_FILE}")
  E_SIZE=$(stat --format='%s' "${EXTRA_FILE}")
  E_HASH_SHA1=$(openssl dgst -sha1 -binary < "${EXTRA_FILE}" | base64)
  E_HASH_SHA256_HEX=$(sha256sum -b "${EXTRA_FILE}" | cut -d " " -f 1)
  EMBED_EXTRA+=("{ \"name\": \"${E_NAME}\", \"size\": \"${E_SIZE}\", \"hash\": \"${E_HASH_SHA1}\", \"hash256\": \"${E_HASH_SHA256_HEX}\" }")
done
EMBED_EXTRA_JOINED=$(IFS=, ; echo "${EMBED_EXTRA[*]}")
if [ -z "${PACKAGE_ID}" ]; then
    # Using 'if POST' here disables set -e as resty expects
    if ! PACKAGE_JSON=$(POST /apps/"${COREOS_APP_ID}"/packages " \
        {
            \"application_id\": \"${COREOS_APP_ID}\",
            \"arch\": ${ARCH_ID},
            \"channels_blacklist\": [],
            \"description\": \"Flatcar Linux ${VERSION}\",
            \"filename\": \"$(basename ${UPDATE_PATH})\",
            \"hash\": \"${PAYLOAD_SHA1}\",
            \"size\": \"${PAYLOAD_SIZE}\",
            \"type\": 1,
            \"url\": \"${UPDATE_URL}\",
            \"version\": \"${VERSION}\",
            \"flatcar_action\":
                {
                    \"sha256\": \"${PAYLOAD_SHA256}\"
                },
            \"extra_files\": [${EMBED_EXTRA_JOINED}]
        }
        " 2>&1); then
		echo "Failed to update metadata on Nebraska."
		echo "Please make sure that you have configured a valid GITHUB_TOKEN."
		echo "The token must have GitHub organization and user read permissions."
		echo "Error: ${PACKAGE_JSON}"
		exit 1
	fi
        PACKAGE_ID=$(echo "${PACKAGE_JSON}" | jq .id)
else
    echo "Payload with version ${VERSION} already present. Skipping upload..."
    exit 1
fi

echo "Uploaded payload to Coreroller"
